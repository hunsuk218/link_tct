{
  "_from": "icon-sdk-js@0.0.5",
  "_id": "icon-sdk-js@0.0.5",
  "_inBundle": false,
  "_integrity": "sha512-dhz9BEWFvO/3cLQhS+w/0y24ORQSPsh3Me6lvtqoI0xwMj374bEoTxvFFVAEkEcPoo2XUN1fhyKeZLmuCU7v1g==",
  "_location": "/icon-sdk-js",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "icon-sdk-js",
    "fetchSpec": "0.0.5",
    "name": "icon-sdk-js",
    "raw": "icon-sdk-js@0.0.5",
    "rawSpec": "0.0.5",
    "registry": true,
    "saveSpec": null,
    "type": "version"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/icon-sdk-js/-/icon-sdk-js-0.0.5.tgz",
  "_shasum": "afeabc90f63e1ebd358134a4fb700a61b0be152b",
  "_shrinkwrap": null,
  "_spec": "icon-sdk-js@0.0.5",
  "_where": "/home/khs/last",
  "author": {
    "email": "foo@icon.foundation",
    "name": "icon.foundation"
  },
  "bugs": {
    "url": "https://github.com/icon-project/icon-sdk-js/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "@babel/runtime": "^7.1.2",
    "axios": "^0.18.0",
    "bignumber.js": "^7.2.1",
    "crypto": "^1.0.1",
    "js-sha3": "^0.8.0",
    "scryptsy": "^2.0.0",
    "secp256k1": "^3.5.2",
    "sync-request": "^6.0.0",
    "uuid": "^3.3.2",
    "xhr": "^2.5.0"
  },
  "deprecated": false,
  "description": "JavaScript SDK for ICON",
  "devDependencies": {
    "@babel/cli": "^7.0.0-beta.51",
    "@babel/core": "^7.0.0-beta.51",
    "@babel/plugin-transform-runtime": "^7.1.0",
    "@babel/preset-env": "^7.0.0-beta.51",
    "babel-eslint": "^8.0.3",
    "babel-loader": "^8.0.0-beta.4",
    "babel-plugin-add-module-exports": "^0.2.1",
    "babel-plugin-transform-object-rest-spread": "^7.0.0-beta.3",
    "babel-preset-env": "^7.0.0-beta.3",
    "babel-register": "^7.0.0-beta.3",
    "chai": "^4.1.2",
    "eslint": "^5.6.1",
    "eslint-config-airbnb": "^17.1.0",
    "eslint-loader": "^2.0.0",
    "eslint-plugin-import": "^2.14.0",
    "eslint-plugin-jsx-a11y": "^6.1.2",
    "eslint-plugin-react": "^7.11.1",
    "jsdom": "11.11.0",
    "jsdom-global": "3.0.2",
    "mocha": "^4.0.1",
    "prettier": "^1.14.3",
    "uglifyjs-webpack-plugin": "^1.3.0",
    "webpack": "^4.12.2",
    "webpack-cli": "^3.0.8",
    "yargs": "^10.0.3"
  },
  "homepage": "https://github.com/icon-project/icon-sdk-js/",
  "keywords": [
    "commonjs",
    "es6",
    "library",
    "starter",
    "umd",
    "universal",
    "webpack"
  ],
  "license": "Apache-2.0",
  "main": "build/icon-sdk-js.min.js",
  "name": "icon-sdk-js",
  "optionalDependencies": {},
  "readme": "# ICON SDK for JavaScript\n\nICON supports SDK for 3rd party or user services development. You can integrate ICON SDK for your project and utilize ICONâ€™s functionality. Currently, ICON SDK works only in a browser environment. Node.js will be supported soon.\n\n\n## Installation\n\n### Node.js\n```bash\nnpm install --save icon-sdk-js\n```\n\n### CDN\n\n`icon-sdk-js` is available over a CDN.\n```html\n<script src=\"https://cdn.jsdelivr.net/gh/icon-project/icon-sdk-js@latest/build/icon-sdk-js.min.js\"></script>\n```\n\n\n## Quick start\n\nQuickstart is an example project of Icon SDK JavaScript.\nDetail description is written in `readme` file in quickstart directory .\n\n\n### Rebuild icon-sdk-js and Run quickstart\n\nIf you want to rebuild icon-sdk-js library and run quickstart project, run `npm run quickstart:rebuild` command at icon-sdk-js root directory.\n\n```bash\nnpm run quickstart:rebuild   // open http://localhost:3000/ in browser\n```\n\n## IconService\n\nAPIs are called through `IconService`.\n\nIt can be initialized as follows.\n\n```javascript\n// Creates an instance of IconService using the HTTP provider.\nconst iconService = new IconService(new HttpProvider(\"https://url\"));\n```\n\n\n## Queries\n\nAll queries are requested by a `Request` object.\n\nIts requests are executed as **Synchronized** or **Asynchronized**.\n\nOnce the request has been executed, the request can not be executed again.\n\n```javascript\n// Synchronized request execution\nconst balance = request.execute(false)\n\n// Asynchronized request execution\nconst balanceAsync = await reqeust.execute(true)\n```\n\nThe querying APIs are as follows.\n\n```javascript\n\n// Gets the block by height\nconst request = iconService.getBlock(1000);\n\n// by hash\nconst request = iconService.getBlock(\"0x0000...000\");\n\n// by predefined block value\nconst request = iconService.getBlock('latest');\n\n// Gets a list of the SCORE API\nconst request = iconService.getScoreApi(\"cx0000...000\");\n\n// Gets the total supply of icx\nconst request = iconService.getTotalSupply();\n\n// Gets the transaction by hash\nconst request = iconService.getTransaction(\"0x0000...000\");\n\n// Gets the result of the transaction by hash\nconst request = iconService.getTransactionResult(\"0x0000...000\");\n\n// Calls a SCORE API just for reading\nconst callBuilder = new CallBuilder()\nconst call = callBuilder\n    .from(wallet.getAddress())\n    .to(scoreAddress)\n    .method(\"balanceOf\")\n    .params(params)\n    .build();\n\nconst request = iconService.call(call);\n```\n\n\n## Sending transactions\n\nCalling SCORE APIs to change states is requested as sending a transaction.\n\nBefore sending a transaction, the transaction should be signed. It can be done using a `Wallet` object.\n\n**Loading wallets and storing the Keystore**\n\n```javascript\nimport { Wallet } from 'icon-sdk-js'\n\n// Generates a wallet.\nconst wallet = Wallet.create();\n\n// Loads a wallet from the private key.\nconst wallet = Wallet.load(\"0x0000...000\");\n```\n\n**Creating transactions**\n\n```javascript\n\nconst transactionBuilder = new TransactionBuilder()\n\n// sending icx\nconst transaction = transactionBuilder\n    .nid(networkId)\n    .from(wallet.getAddress())\n    .to(scoreAddress)\n    .value(new BigNumber(\"150000000\"))\n    .stepLimit(new BigNumber(\"1000000\"))\n    .nonce(new BigNumber(\"1000000\"))\n    .build();\n\n// deploy\nconst transaction = transactionBuilder\n    .nid(networkId)\n    .from(wallet.getAddress())\n    .to(scoreAddress)\n    .stepLimit(new BigNumber(\"5000000\"))\n    .nonce(new BigNumber(\"1000000\"))\n    .deploy(\"application/zip\", content)\n    .params(params)\n    .build();\n\n// call\nconst transaction = transactionBuilder\n    .nid(networkId)\n    .from(wallet.getAddress())\n    .to(scoreAddress)\n    .value(new BigNumber(\"150000000\"))\n    .stepLimit(new BigNumber(\"1000000\"))\n    .nonce(new BigNumber(\"1000000\"))\n    .call(\"transfer\")\n    .params(params)\n    .build();\n\n// message\nconst transaction = transactionBuilder\n    .nid(networkId)\n    .from(wallet.getAddress())\n    .to(scoreAddress)\n    .value(new BigNumber(\"150000000\"))\n    .stepLimit(new BigNumber(\"1000000\"))\n    .nonce(new BigNumber(\"1000000\"))\n    .message(message)\n    .build();\n```\n\n`SignedTransaction` object signs a transaction using the wallet.\n\nAnd the request is executed as **Synchronized** or **Asynchronized** like a querying request.\n\nOnce the request has been executed, the request can not be executed again.\n\n```javascript\nconst signedTransaction = new SignedTransaction(transaction, wallet);\n\nconst request = iconService.sendTransaction(signedTransaction);\n\n// Synchronized request execution\nconst txHash = request.execute(false)\n\n// Asynchronized request execution\nconst txHash = await reqeust.execute(true)\n```",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/icon-project/icon-sdk-js.git"
  },
  "scripts": {
    "build": "NODE_PATH=./ webpack --env build",
    "dev": "NODE_PATH=./ webpack --progress --colors --watch --env dev",
    "quickstart:rebuild": "eslint --fix lib && NODE_PATH=./ webpack --env build && cd quickstart && npm install && mkdir node_modules/icon-sdk-js; cp -rf ../build ./node_modules/icon-sdk-js/; cp -rf ../package.json ./node_modules/icon-sdk-js/package.json && npm start",
    "test": "NODE_PATH=./ mocha --require babel-register --colors ./test/**/*.spec.js",
    "test:watch": "NODE_PATH=./ mocha --require babel-register --colors -w ./test/**/*.spec.js"
  },
  "version": "0.0.5"
}
