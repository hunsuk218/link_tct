{
  "_from": "window",
  "_id": "window@4.2.5",
  "_inBundle": false,
  "_integrity": "sha512-6srbDxYdfnxsw5ZwsggHLsgkuPpFb+3ja78FZSek7buVn/s19AlCMhb/WMO6hyJ8TP498kqELcRSpWg6hTpVDQ==",
  "_location": "/window",
  "_phantomChildren": {
    "acorn": "5.7.3",
    "acorn-globals": "4.3.0",
    "array-equal": "1.0.0",
    "async-limiter": "1.0.0",
    "browser-process-hrtime": "0.1.3",
    "content-type-parser": "1.0.2",
    "cssom": "0.3.4",
    "domexception": "1.0.1",
    "escodegen": "1.11.0",
    "html-encoding-sniffer": "1.0.2",
    "left-pad": "1.3.0",
    "lodash.sortby": "4.7.0",
    "nwmatcher": "1.4.4",
    "pn": "1.1.0",
    "request": "2.88.0",
    "request-promise-native": "1.0.5",
    "safe-buffer": "5.1.1",
    "sax": "1.2.4",
    "symbol-tree": "3.2.2",
    "tough-cookie": "2.4.3",
    "tr46": "1.0.1",
    "w3c-hr-time": "1.0.1",
    "webidl-conversions": "4.0.2",
    "whatwg-encoding": "1.0.5",
    "xml-name-validator": "3.0.0"
  },
  "_requested": {
    "escapedName": "window",
    "fetchSpec": "latest",
    "name": "window",
    "raw": "window",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/window/-/window-4.2.5.tgz",
  "_shasum": "02b5c48daf462481d5dfc6d331fbfa4d27d78ee4",
  "_spec": "window",
  "_where": "C:\\Users\\gmltn\\blockcar1",
  "author": {
    "email": "lukechilds123@gmail.com",
    "name": "Luke Childs",
    "url": "http://lukechilds.co.uk"
  },
  "bugs": {
    "url": "https://github.com/lukechilds/window/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "jsdom": "11.6.2"
  },
  "deprecated": false,
  "description": "Exports a jsdom window object.",
  "devDependencies": {
    "ava": "^0.25.0",
    "coveralls": "^3.0.0",
    "eslint-config-xo-lukechilds": "^1.0.0",
    "nyc": "^11.0.2",
    "xo": "^0.18.2"
  },
  "engines": {
    "node": ">=4"
  },
  "homepage": "https://github.com/lukechilds/window#readme",
  "keywords": [
    "browser",
    "env",
    "environment",
    "export",
    "jsdom",
    "node",
    "object",
    "simulate",
    "window"
  ],
  "license": "MIT",
  "main": "src/index.js",
  "name": "window",
  "optionalDependencies": {},
  "readme": "# window\n\n> Exports a [`jsdom`](https://github.com/tmpvar/jsdom) window object.\n\n[![Build Status](https://travis-ci.org/lukechilds/window.svg?branch=master)](https://travis-ci.org/lukechilds/window)\n[![Coverage Status](https://coveralls.io/repos/github/lukechilds/window/badge.svg?branch=master)](https://coveralls.io/github/lukechilds/window?branch=master)\n[![npm](https://img.shields.io/npm/dm/window.svg)](https://www.npmjs.com/package/window)\n[![npm](https://img.shields.io/npm/v/window.svg)](https://www.npmjs.com/package/window)\n\nExports a jsdom window object. This is useful for enabling browser modules to run in Node.js or testing browser modules in any Node.js test framework.\n\nRequires Node.js v6 or newer, use `window@3` to support older Node.js versions.\n\n## Install\n\n```shell\nnpm install --save window\n```\n\nOr if you're just using for testing you'll probably want:\n\n```shell\nnpm install --save-dev window\n```\n\n## Usage\n\n```js\nconst Window = require('window');\n\nconst window = new Window();\n\nconst div = window.document.createElement('div');\n// HTMLDivElement\n\ndiv instanceof window.HTMLElement\n// true\n```\n\nBecause `window` is just a normal JavaScript object it can be used more efficiently with object destructuring.\n\n```js\nconst { document } = new Window();\n\ndocument.body.innerHTML = '<div class=\"foo\">Hi!</div>';\ndocument.body.querySelector('.foo').textContent;\n// \"Hi!\"\n```\n\n### Config\n\nYou can also pass a jsdom config object that will be passed along to the underlying jsdom instance.\n\n```js\nconst jsdomConfig = { userAgent: 'Custom UA' };\nconst window = new Window(jsdomConfig);\n\nwindow.navigator.userAgent;\n// \"Custom UA\"\n```\n\n## Universal Testing Pattern\n\nYou can use a really simple pattern to enable your browser modules to run in Node.js. Just allow a window object to be passed in to your module and prepend any references to browser globals with `win`. Set `win` to the passed in window object if it exists, otherwise fallback to global `window`.\n\n```js\nfunction createTitle(text, win) {\n  win = win || window;\n\n  const title = win.document.createElement('h1');\n  title.innerHTML = text;\n  return title;\n};\n\nmodule.exports = createTitle;\n```\n\nBrowser usage:\n\n```js\ncreateTitle('Hi');\n// <h1>Hi</h1>\n```\n\nNode.js usage:\n\n```js\nconst window = new Window();\n\ncreateTitle('Hi', window);\n// <h1>Hi</h1>\n```\n\nObviously you don't need to follow this exact pattern, maybe you already have an options object and you only need `document` not the entire window object:\n\n```js\nfunction createTitle(text, opts = {}) {\n  const doc = opts.document || window.document;\n\n  const title = doc.createElement('h1');\n  ...\n```\n\nYou can see an example of this pattern in `lukechilds/create-node`. Specifically [src/create-node.js](https://github.com/lukechilds/create-node/blob/master/src/create-node.js) and  [test/unit.js](https://github.com/lukechilds/create-node/blob/master/test/unit.js).\n\n## What about dependencies?\n\nSometimes you may have dependencies that you can't pass a window object to. In that scenario you can alternatively use [`browser-env`](https://github.com/lukechilds/browser-env) which will simulate a global browser environment.\n\n## License\n\nMIT Â© Luke Childs\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/lukechilds/window.git"
  },
  "scripts": {
    "coverage": "nyc report --reporter=text-lcov | coveralls",
    "test": "xo && nyc ava"
  },
  "version": "4.2.5",
  "xo": {
    "extends": "xo-lukechilds"
  }
}
